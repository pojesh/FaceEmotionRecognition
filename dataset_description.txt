AFFECTNET SUBSET : 96X96X3

class_names = [
    "Anger",
    "Contempt",
    "Disgust",
    "Fear",
    "Happy",
    "Neutral",
    "Sad",
    "Surprise",
]

Dataset Class distribution(Before Augmentation) -
Folder  Anger  Contempt  Disgust  Fear  Happy  Neutral  Sad  Surprise  Total
 train   2339      1996     2242  2021   2154     1616 1914      2819  17101
 valid    712       618      672   622    791      514  603       874   5406
  test    383       332      327   318    399      250  278       468   2755

Dataset Class Distribution(After Augmentation) - 
Summary Table:
         Folder  Anger  Contempt  Disgust  Fear  Happy  Neutral  Sad  Surprise  Total
train_augmented   2819      2819     2819  2819   2819     2819 2819      2819  22552
          valid    712       618      672   622    791      514  603       874   5406
           test    383       332      327   318    399      250  278       468   2755

def apply_augmentation(image, augmentation_type):
    if augmentation_type == 0:
        # Horizontal flip
        return ImageOps.mirror(image)
    elif augmentation_type == 1:
        # Brightness adjustment
        enhancer = ImageEnhance.Brightness(image)
        return enhancer.enhance(random.uniform(0.8, 1.2))
    elif augmentation_type == 2:
        # Contrast adjustment
        enhancer = ImageEnhance.Contrast(image)
        return enhancer.enhance(random.uniform(0.8, 1.2))
    elif augmentation_type == 3:
        # Rotation (slight)
        return image.rotate(random.uniform(-15, 15), expand=False)
    elif augmentation_type == 4:
        # Combination: flip + brightness
        img = ImageOps.mirror(image)
        enhancer = ImageEnhance.Brightness(img)
        return enhancer.enhance(random.uniform(0.8, 1.2))
    elif augmentation_type == 5:
        # Combination: rotation + contrast
        img = image.rotate(random.uniform(-15, 15), expand=False)
        enhancer = ImageEnhance.Contrast(img)
        return enhancer.enhance(random.uniform(0.8, 1.2))
    else:
        return image